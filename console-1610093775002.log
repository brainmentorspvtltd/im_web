console.log('I am Sync1');
console.log('I am Sync2');
setTimeout(()=>{
console.log('I Will call later');
},4000);
console.log('I am Sync3');
VM2083:1 I am Sync1
VM2083:2 I am Sync2
VM2083:6 I am Sync3
undefined
VM2083:4 I Will call later
console.log('I am Sync1');
console.log('I am Sync2');
//var e = doWork();
 doWork(giveMeValue);
console.log('I am Sync3');
//console.log('I am Sync3 ',e);
function giveMeValue(val){
console.log('Give Me Value ',val);
}

function doWork(fn){
setTimeout(()=>{
console.log('I Will call later');
fn('I am Back ');
//return "Value of E ";
},4000);

}
VM2362:1 I am Sync1
VM2362:2 I am Sync2
VM2362:5 I am Sync3
undefined
VM2362:13 I Will call later
VM2362:8 Give Me Value  I am Back 
var f = setInterval(()=>console.log('Hello'),1000);
undefined
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
VM2486:1 Hello
clearInterval(f);
undefined
console.log('I am Sync1');
console.log('I am Sync2');
//var e = doWork();
 doWork(giveMeValue, error);
console.log('I am Sync3');
//console.log('I am Sync3 ',e);
function giveMeValue(val){
console.log('Give Me Value ',val);
}
function error(er){
console.log('Fail ',er);
}

function doWork(fn,fail){
setTimeout(()=>{
console.log('I Will call later');
fn('I am Back ');
if(10>20){
fail('Failure Reason');
}
//return "Value of E ";
},4000);

}
VM2651:1 I am Sync1
VM2651:2 I am Sync2
VM2651:5 I am Sync3
undefined
VM2651:16 I Will call later
VM2651:8 Give Me Value  I am Back 
console.log('I am Sync1');
console.log('I am Sync2');
//var e = doWork();
 doWork(giveMeValue, error);
console.log('I am Sync3');
//console.log('I am Sync3 ',e);
function giveMeValue(val){
console.log('Give Me Value ',val);
}
function error(er){
console.log('Fail ',er);
}

function doWork(fn,fail){
var pr = new Promise((resolve, reject)=>{
setTimeout(()=>{
console.log('I Will call later');
fn('I am Back ');
if(10>20){
fail('Failure Reason');
}
//return "Value of E ";
},4000);
});

return pr;

}
VM2730:1 I am Sync1
VM2730:2 I am Sync2
VM2730:5 I am Sync3
undefined
VM2730:17 I Will call later
VM2730:8 Give Me Value  I am Back 
console.log('I am Sync1');
console.log('I am Sync2');
//var e = doWork();
var p = doWork();
console.log('Promise ',p);
p.then(data=>console.log(data)).catch(err=>console.log(err));
console.log('I am Sync3');
//console.log('I am Sync3 ',e);


function doWork(){
var pr = new Promise((resolve, reject)=>{
setTimeout(()=>{
console.log('I Will call later');
resolve('I am Back ');
if(10>20){
reject('Failure Reason');
}
//return "Value of E ";
},4000);
});

return pr;

}
VM3042:1 I am Sync1
VM3042:2 I am Sync2
VM3042:5 Promise  Promise {<pending>}
VM3042:7 I am Sync3
undefined
VM3042:14 I Will call later
VM3042:6 I am Back 
p;
Promise {<fulfilled>: "I am Back "}
function blockIt() async{
console.log('Before Call ');
var p= await doWork();
console.log('Data Rec ',p);
return 1000;
}
VM3237:1 Uncaught SyntaxError: Unexpected token 'async'
async function blockIt() {
console.log('Before Call ');
var p= await doWork();
console.log('Data Rec ',p);
return 1000;
}
undefined
blockIt();
VM3255:2 Before Call 
Promise {<pending>}
VM3042:14 I Will call later
VM3255:4 Data Rec  I am Back 
var g1 = blockIt();
VM3255:2 Before Call 
undefined
VM3042:14 I Will call later
VM3255:4 Data Rec  I am Back 
g1;
Promise {<fulfilled>: 1000}
console.log('Network Call ');
var pr = fetch('https://raw.githubusercontent.com/brainmentorspvtltd/im_web/main/myserverdata.json');
pr.then(response=>console.log(response)).catch(err=>console.log(err));
console.log('After Network Call ',pr);
VM3647:1 Network Call 
VM3647:4 After Network Call  Promise {<pending>}
undefined
VM3647:3 Response {type: "cors", url: "https://raw.githubusercontent.com/brainmentorspvtltd/im_web/main/myserverdata.json", redirected: false, status: 200, ok: true, …}
console.log('Network Call ');
var pr = fetch('https://raw.githubusercontent.com/brainmentorspvtltd/im_web/main/myserverdata.json');
pr.then(response=>response.json().then(data=>console.log(data)).catch(e=>console.log('Invalid JSOn ')).catch(err=>console.log(err));
console.log('After Network Call ',pr);
VM3855:3 Uncaught SyntaxError: missing ) after argument list
console.log('Network Call ');
var pr = fetch('https://raw.githubusercontent.com/brainmentorspvtltd/im_web/main/myserverdata.json');
pr.then(response=>response.json().then(data=>console.log(data)).catch(e=>console.log('Invalid JSOn '))).catch(err=>console.log(err));
console.log('After Network Call ',pr);
VM3861:1 Network Call 
VM3861:4 After Network Call  Promise {<pending>}
undefined
VM3861:3 {mydata: Array(3)}mydata: Array(3)0: {id: "1001", name: "fhgdsjkg", price: "51", date: "2021-01-08", color: "#000000", …}1: {id: "1002", name: "fhgdsjkg", price: "51", date: "2021-01-08", color: "#000000", …}2: {id: "1003", name: "fhgdsjkg", price: "51", date: "2021-01-08", color: "#000000", …}length: 3__proto__: Array(0)__proto__: Object
